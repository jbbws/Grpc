// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: express/express_service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc.Business.ExpressService {

  /// <summary>Holder for reflection information generated from express/express_service.proto</summary>
  public static partial class ExpressServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for express/express_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExpressServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1leHByZXNzL2V4cHJlc3Nfc2VydmljZS5wcm90bxIHZXhwcmVzcyIVCgVE",
            "b2NJZBIMCgRjb2RlGAEgASgFItIBCgpBY3RpdmVEYXRhEhwKBXRvdGFsGAEg",
            "ASgLMg0uZXhwcmVzcy5QYWlyEhoKA3phcBgCIAEoCzINLmV4cHJlc3MuUGFp",
            "chIaCgNuZHMYAyABKAsyDS5leHByZXNzLlBhaXISGgoDZGViGAQgASgLMg0u",
            "ZXhwcmVzcy5QYWlyEhoKA2ZpbhgFIAEoCzINLmV4cHJlc3MuUGFpchIaCgNt",
            "b24YBiABKAsyDS5leHByZXNzLlBhaXISGgoDb3RoGAcgASgLMg0uZXhwcmVz",
            "cy5QYWlyIjAKBFBhaXISCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgCEgwK",
            "BG5hbWUYAyABKAkyQQoNRXhwZXNzU2VydmljZRIwCglHZXRBY3RpdmUSDi5l",
            "eHByZXNzLkRvY0lkGhMuZXhwcmVzcy5BY3RpdmVEYXRhQh+qAhxHcnBjLkJ1",
            "c2luZXNzLkV4cHJlc3NTZXJ2aWNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Business.ExpressService.DocId), global::Grpc.Business.ExpressService.DocId.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Business.ExpressService.ActiveData), global::Grpc.Business.ExpressService.ActiveData.Parser, new[]{ "Total", "Zap", "Nds", "Deb", "Fin", "Mon", "Oth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Business.ExpressService.Pair), global::Grpc.Business.ExpressService.Pair.Parser, new[]{ "Key", "Value", "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DocId : pb::IMessage<DocId> {
    private static readonly pb::MessageParser<DocId> _parser = new pb::MessageParser<DocId>(() => new DocId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DocId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.Business.ExpressService.ExpressServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocId(DocId other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DocId Clone() {
      return new DocId(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DocId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DocId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DocId other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActiveData : pb::IMessage<ActiveData> {
    private static readonly pb::MessageParser<ActiveData> _parser = new pb::MessageParser<ActiveData>(() => new ActiveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.Business.ExpressService.ExpressServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveData(ActiveData other) : this() {
      Total = other.total_ != null ? other.Total.Clone() : null;
      Zap = other.zap_ != null ? other.Zap.Clone() : null;
      Nds = other.nds_ != null ? other.Nds.Clone() : null;
      Deb = other.deb_ != null ? other.Deb.Clone() : null;
      Fin = other.fin_ != null ? other.Fin.Clone() : null;
      Mon = other.mon_ != null ? other.Mon.Clone() : null;
      Oth = other.oth_ != null ? other.Oth.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveData Clone() {
      return new ActiveData(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private global::Grpc.Business.ExpressService.Pair total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Business.ExpressService.Pair Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "zap" field.</summary>
    public const int ZapFieldNumber = 2;
    private global::Grpc.Business.ExpressService.Pair zap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Business.ExpressService.Pair Zap {
      get { return zap_; }
      set {
        zap_ = value;
      }
    }

    /// <summary>Field number for the "nds" field.</summary>
    public const int NdsFieldNumber = 3;
    private global::Grpc.Business.ExpressService.Pair nds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Business.ExpressService.Pair Nds {
      get { return nds_; }
      set {
        nds_ = value;
      }
    }

    /// <summary>Field number for the "deb" field.</summary>
    public const int DebFieldNumber = 4;
    private global::Grpc.Business.ExpressService.Pair deb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Business.ExpressService.Pair Deb {
      get { return deb_; }
      set {
        deb_ = value;
      }
    }

    /// <summary>Field number for the "fin" field.</summary>
    public const int FinFieldNumber = 5;
    private global::Grpc.Business.ExpressService.Pair fin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Business.ExpressService.Pair Fin {
      get { return fin_; }
      set {
        fin_ = value;
      }
    }

    /// <summary>Field number for the "mon" field.</summary>
    public const int MonFieldNumber = 6;
    private global::Grpc.Business.ExpressService.Pair mon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Business.ExpressService.Pair Mon {
      get { return mon_; }
      set {
        mon_ = value;
      }
    }

    /// <summary>Field number for the "oth" field.</summary>
    public const int OthFieldNumber = 7;
    private global::Grpc.Business.ExpressService.Pair oth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Business.ExpressService.Pair Oth {
      get { return oth_; }
      set {
        oth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Total, other.Total)) return false;
      if (!object.Equals(Zap, other.Zap)) return false;
      if (!object.Equals(Nds, other.Nds)) return false;
      if (!object.Equals(Deb, other.Deb)) return false;
      if (!object.Equals(Fin, other.Fin)) return false;
      if (!object.Equals(Mon, other.Mon)) return false;
      if (!object.Equals(Oth, other.Oth)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (total_ != null) hash ^= Total.GetHashCode();
      if (zap_ != null) hash ^= Zap.GetHashCode();
      if (nds_ != null) hash ^= Nds.GetHashCode();
      if (deb_ != null) hash ^= Deb.GetHashCode();
      if (fin_ != null) hash ^= Fin.GetHashCode();
      if (mon_ != null) hash ^= Mon.GetHashCode();
      if (oth_ != null) hash ^= Oth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (total_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Total);
      }
      if (zap_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Zap);
      }
      if (nds_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Nds);
      }
      if (deb_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Deb);
      }
      if (fin_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Fin);
      }
      if (mon_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Mon);
      }
      if (oth_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Oth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (total_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Total);
      }
      if (zap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Zap);
      }
      if (nds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nds);
      }
      if (deb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deb);
      }
      if (fin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fin);
      }
      if (mon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mon);
      }
      if (oth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveData other) {
      if (other == null) {
        return;
      }
      if (other.total_ != null) {
        if (total_ == null) {
          total_ = new global::Grpc.Business.ExpressService.Pair();
        }
        Total.MergeFrom(other.Total);
      }
      if (other.zap_ != null) {
        if (zap_ == null) {
          zap_ = new global::Grpc.Business.ExpressService.Pair();
        }
        Zap.MergeFrom(other.Zap);
      }
      if (other.nds_ != null) {
        if (nds_ == null) {
          nds_ = new global::Grpc.Business.ExpressService.Pair();
        }
        Nds.MergeFrom(other.Nds);
      }
      if (other.deb_ != null) {
        if (deb_ == null) {
          deb_ = new global::Grpc.Business.ExpressService.Pair();
        }
        Deb.MergeFrom(other.Deb);
      }
      if (other.fin_ != null) {
        if (fin_ == null) {
          fin_ = new global::Grpc.Business.ExpressService.Pair();
        }
        Fin.MergeFrom(other.Fin);
      }
      if (other.mon_ != null) {
        if (mon_ == null) {
          mon_ = new global::Grpc.Business.ExpressService.Pair();
        }
        Mon.MergeFrom(other.Mon);
      }
      if (other.oth_ != null) {
        if (oth_ == null) {
          oth_ = new global::Grpc.Business.ExpressService.Pair();
        }
        Oth.MergeFrom(other.Oth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (total_ == null) {
              total_ = new global::Grpc.Business.ExpressService.Pair();
            }
            input.ReadMessage(total_);
            break;
          }
          case 18: {
            if (zap_ == null) {
              zap_ = new global::Grpc.Business.ExpressService.Pair();
            }
            input.ReadMessage(zap_);
            break;
          }
          case 26: {
            if (nds_ == null) {
              nds_ = new global::Grpc.Business.ExpressService.Pair();
            }
            input.ReadMessage(nds_);
            break;
          }
          case 34: {
            if (deb_ == null) {
              deb_ = new global::Grpc.Business.ExpressService.Pair();
            }
            input.ReadMessage(deb_);
            break;
          }
          case 42: {
            if (fin_ == null) {
              fin_ = new global::Grpc.Business.ExpressService.Pair();
            }
            input.ReadMessage(fin_);
            break;
          }
          case 50: {
            if (mon_ == null) {
              mon_ = new global::Grpc.Business.ExpressService.Pair();
            }
            input.ReadMessage(mon_);
            break;
          }
          case 58: {
            if (oth_ == null) {
              oth_ = new global::Grpc.Business.ExpressService.Pair();
            }
            input.ReadMessage(oth_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pair : pb::IMessage<Pair> {
    private static readonly pb::MessageParser<Pair> _parser = new pb::MessageParser<Pair>(() => new Pair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.Business.ExpressService.ExpressServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair(Pair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair Clone() {
      return new Pair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pair other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
